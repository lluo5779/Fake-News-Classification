import sys
import numpy as np
np.set_printoptions(threshold=np.inf)

sys.path.append('../tokenizer')
from tokenizer import tokenizer

if __name__=='__main__':

    # create TokenSet
    token_set = tokenizer.tokenize('data/examples/truncated.csv',433,1,True)

    # get venture/session/token data
    venture_data = token_set.get_all_ventures().numpy()
    session_data = token_set.get_all_sessions().numpy()
    token_data   = token_set.get_all_data().numpy()

    # get boolean location of each venture/session pair
    vs_pairs = {}
    for v in set(venture_data):
        venture_bool = [int(x==v) for x in venture_data]
        for s in set(session_data):
            session_bool = [int(x==s) for x in session_data]
            vs_pairs[(v,s)] = np.logical_and(venture_bool,session_bool) == 1

    # get actual token values for each venture/session pair, and collapse
    # each row of tokens into a single array
    vs_data = {}
    for key,value in vs_pairs.items():
        vs_data[key] = token_data[value].flatten()

    # call collapse_speakers function
    collapsed = token_set.collapse_speakers()

    # get venture/session/token data after collapsing
    venture_data = collapsed.get_all_ventures().numpy()
    session_data = collapsed.get_all_sessions().numpy()
    token_data = collapsed.get_all_data()

    # assert that the size of each row of tokens computed above is identical
    # to the size of each row generated by collapse_speakers
    for key,value in vs_data.items():
        #print(key,value)
        venture_bool = np.array([int(x==key[0]) for x in venture_data]) == 1
        session_bool = np.array([int(x==key[1]) for x in session_data]) == 1
        vs_bool = np.logical_and(venture_bool,session_bool)
        if True in vs_bool:
            print(repr(key)+':',len([x for x in token_data[vs_bool.tolist().index(True)].tolist() if x < collapsed.word2idx['_PAD']]),
                  '==',len([x for x in value if x < collapsed.word2idx['_PAD']]))
            assert len([x for x in token_data[vs_bool.tolist().index(True)].tolist() if x < collapsed.word2idx['_PAD']]) \
                == len([x for x in value if x < collapsed.word2idx['_PAD']])
        else:
            print(f'-- venture {key[0]}, session {key[1]} has no data.')
